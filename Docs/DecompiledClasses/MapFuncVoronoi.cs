#define UNITY_EDITOR
using System;
using UnityEngine;

public static class MapFuncVoronoi
{
	public enum VoronoiType
	{
		First,
		Second,
		Third,
		Fourth,
		Difference21,
		Difference32,
		Crackle,
		Prop12
	}

	public enum DistanceMethod
	{
		Length,
		Length2,
		Length4,
		Manhattan,
		Chebychev,
		Minkowski4,
		Minkowski5
	}

	private static float[] da4 = new float[4];

	private static Vector2[] pa4 = new Vector2[4];

	private static readonly float k_Root2OverRoot3 = Mathf.Sqrt(2f) / Mathf.Sqrt(3f);

	private static byte[] Index = new byte[512]
	{
		162, 160, 25, 59, 248, 235, 170, 238, 243, 28,
		103, 40, 29, 237, 0, 222, 149, 46, 220, 63,
		58, 130, 53, 77, 108, 186, 54, 208, 246, 12,
		121, 50, 209, 89, 244, 8, 139, 99, 137, 47,
		184, 180, 151, 131, 242, 143, 24, 199, 81, 20,
		101, 135, 72, 32, 66, 168, 128, 181, 64, 19,
		178, 34, 126, 87, 188, 127, 107, 157, 134, 76,
		200, 219, 124, 213, 37, 78, 90, 85, 116, 80,
		205, 179, 122, 187, 195, 203, 182, 226, 228, 236,
		253, 152, 11, 150, 211, 158, 92, 161, 100, 241,
		129, 97, 225, 196, 36, 114, 73, 140, 144, 75,
		132, 52, 56, 171, 120, 202, 31, 1, 215, 147,
		17, 193, 88, 169, 49, 249, 68, 109, 191, 51,
		156, 95, 9, 148, 163, 133, 6, 198, 154, 30,
		123, 70, 21, 48, 39, 43, 27, 113, 60, 91,
		214, 111, 98, 172, 79, 194, 192, 14, 177, 35,
		167, 223, 71, 176, 119, 105, 5, 233, 230, 231,
		118, 115, 15, 254, 110, 155, 86, 239, 18, 165,
		55, 252, 174, 217, 3, 142, 221, 16, 185, 206,
		201, 141, 218, 42, 189, 104, 23, 159, 190, 212,
		10, 204, 210, 232, 67, 61, 112, 183, 2, 125,
		153, 216, 13, 96, 138, 4, 44, 62, 146, 229,
		175, 83, 7, 224, 41, 166, 197, 227, 245, 247,
		74, 65, 38, 106, 22, 94, 82, 45, 33, 173,
		240, 145, 255, 234, 84, 250, 102, 26, 69, 57,
		207, 117, 164, 136, 251, 93, 162, 160, 25, 59,
		248, 235, 170, 238, 243, 28, 103, 40, 29, 237,
		0, 222, 149, 46, 220, 63, 58, 130, 53, 77,
		108, 186, 54, 208, 246, 12, 121, 50, 209, 89,
		244, 8, 139, 99, 137, 47, 184, 180, 151, 131,
		242, 143, 24, 199, 81, 20, 101, 135, 72, 32,
		66, 168, 128, 181, 64, 19, 178, 34, 126, 87,
		188, 127, 107, 157, 134, 76, 200, 219, 124, 213,
		37, 78, 90, 85, 116, 80, 205, 179, 122, 187,
		195, 203, 182, 226, 228, 236, 253, 152, 11, 150,
		211, 158, 92, 161, 100, 241, 129, 97, 225, 196,
		36, 114, 73, 140, 144, 75, 132, 52, 56, 171,
		120, 202, 31, 1, 215, 147, 17, 193, 88, 169,
		49, 249, 68, 109, 191, 51, 156, 95, 9, 148,
		163, 133, 6, 198, 154, 30, 123, 70, 21, 48,
		39, 43, 27, 113, 60, 91, 214, 111, 98, 172,
		79, 194, 192, 14, 177, 35, 167, 223, 71, 176,
		119, 105, 5, 233, 230, 231, 118, 115, 15, 254,
		110, 155, 86, 239, 18, 165, 55, 252, 174, 217,
		3, 142, 221, 16, 185, 206, 201, 141, 218, 42,
		189, 104, 23, 159, 190, 212, 10, 204, 210, 232,
		67, 61, 112, 183, 2, 125, 153, 216, 13, 96,
		138, 4, 44, 62, 146, 229, 175, 83, 7, 224,
		41, 166, 197, 227, 245, 247, 74, 65, 38, 106,
		22, 94, 82, 45, 33, 173, 240, 145, 255, 234,
		84, 250, 102, 26, 69, 57, 207, 117, 164, 136,
		251, 93
	};

	private static float[] Coords = new float[768]
	{
		0.536902f,
		0.020915f,
		0.501445f,
		0.216316f,
		0.517036f,
		0.822466f,
		0.965315f,
		0.377313f,
		0.678764f,
		0.744545f,
		0.097731f,
		0.396357f,
		0.247202f,
		0.520897f,
		0.613396f,
		0.542124f,
		0.146813f,
		0.255489f,
		0.810868f,
		0.638641f,
		0.980742f,
		0.292316f,
		0.357948f,
		0.114382f,
		0.861377f,
		0.629634f,
		0.72253f,
		0.714103f,
		0.048549f,
		0.075668f,
		0.56492f,
		0.162026f,
		0.054466f,
		0.411738f,
		0.156897f,
		0.887657f,
		0.599368f,
		0.074249f,
		0.170277f,
		0.225799f,
		0.393154f,
		0.301348f,
		0.057434f,
		0.293849f,
		0.442745f,
		0.150002f,
		0.398732f,
		0.184582f,
		0.9152f,
		0.630984f,
		0.97404f,
		0.117228f,
		0.79552f,
		0.763238f,
		0.158982f,
		0.616211f,
		0.250825f,
		0.906539f,
		0.316874f,
		0.676205f,
		0.23472f,
		0.667673f,
		0.792225f,
		0.273671f,
		0.119363f,
		0.199131f,
		0.856716f,
		0.828554f,
		0.900718f,
		0.70596f,
		0.635923f,
		0.989433f,
		0.027261f,
		0.283507f,
		0.113426f,
		0.388115f,
		0.900176f,
		0.637741f,
		0.438802f,
		0.71549f,
		0.043692f,
		0.20264f,
		0.378325f,
		0.450325f,
		0.471832f,
		0.147803f,
		0.906899f,
		0.524178f,
		0.784981f,
		0.051483f,
		0.893369f,
		0.596895f,
		0.275635f,
		0.391483f,
		0.844673f,
		0.103061f,
		0.257322f,
		0.70839f,
		0.504091f,
		0.199517f,
		0.660339f,
		0.376071f,
		0.03888f,
		0.531293f,
		0.216116f,
		0.138672f,
		0.907737f,
		0.807994f,
		0.659582f,
		0.915264f,
		0.449075f,
		0.627128f,
		0.480173f,
		0.380942f,
		0.018843f,
		0.211808f,
		0.569701f,
		0.082294f,
		0.689488f,
		0.57306f,
		0.593859f,
		0.21608f,
		0.373159f,
		0.108117f,
		0.595539f,
		0.021768f,
		0.380297f,
		0.948125f,
		0.377833f,
		0.319699f,
		0.315249f,
		0.972805f,
		0.79227f,
		0.445396f,
		0.845323f,
		0.372186f,
		0.096147f,
		0.689405f,
		0.423958f,
		0.055675f,
		0.11794f,
		0.328456f,
		0.605808f,
		0.631768f,
		0.37217f,
		0.213723f,
		0.0327f,
		0.447257f,
		0.440661f,
		0.728488f,
		0.299853f,
		0.148599f,
		0.649212f,
		0.498381f,
		0.049921f,
		0.496112f,
		0.607142f,
		0.562595f,
		0.990246f,
		0.739659f,
		0.108633f,
		0.978156f,
		0.209814f,
		0.258436f,
		(float)Math.PI * 29f / 104f,
		0.30926f,
		0.600673f,
		0.713597f,
		0.576967f,
		0.641402f,
		0.85393f,
		0.029173f,
		0.418111f,
		0.581593f,
		0.008394f,
		0.589904f,
		0.661574f,
		0.979326f,
		0.275724f,
		0.111109f,
		0.440472f,
		0.120839f,
		0.521602f,
		0.648308f,
		0.284575f,
		0.204501f,
		0.153286f,
		0.822444f,
		0.300786f,
		0.303906f,
		0.364717f,
		0.209038f,
		0.916831f,
		0.900245f,
		0.600685f,
		0.890002f,
		0.58166f,
		0.431154f,
		0.705569f,
		0.55125f,
		0.417075f,
		0.403749f,
		0.696652f,
		0.292652f,
		0.911372f,
		0.690922f,
		0.323718f,
		0.036773f,
		0.258976f,
		0.274265f,
		0.225076f,
		0.628965f,
		0.351644f,
		0.065158f,
		0.08034f,
		0.467271f,
		0.130643f,
		0.385914f,
		0.919315f,
		0.253821f,
		0.966163f,
		0.017439f,
		0.39261f,
		0.478792f,
		0.978185f,
		0.072691f,
		0.982009f,
		0.097987f,
		0.731533f,
		0.401233f,
		0.10757f,
		0.349587f,
		0.479122f,
		0.700598f,
		0.481751f,
		0.788429f,
		0.706864f,
		0.120086f,
		0.562691f,
		0.981797f,
		0.001223f,
		0.19212f,
		0.451543f,
		0.173092f,
		0.10896f,
		0.549594f,
		0.587892f,
		0.657534f,
		0.396365f,
		0.125153f,
		0.66642f,
		0.385823f,
		0.890916f,
		0.436729f,
		0.128114f,
		0.369598f,
		0.759096f,
		0.044677f,
		0.904752f,
		0.088052f,
		0.621148f,
		0.005047f,
		0.452331f,
		0.162032f,
		0.494238f,
		0.523349f,
		0.741829f,
		0.69845f,
		0.452316f,
		0.563487f,
		0.819776f,
		0.49216f,
		0.00421f,
		0.647158f,
		0.551475f,
		0.362995f,
		0.177937f,
		0.814722f,
		0.727729f,
		0.867126f,
		0.997157f,
		0.108149f,
		0.085726f,
		0.796024f,
		0.665075f,
		0.362462f,
		0.323124f,
		0.043718f,
		0.042357f,
		0.31503f,
		0.328954f,
		0.870845f,
		0.683186f,
		0.467922f,
		0.514894f,
		0.809971f,
		0.631979f,
		0.176571f,
		0.36632f,
		0.850621f,
		0.505555f,
		0.749551f,
		0.75083f,
		0.401714f,
		0.481216f,
		0.438393f,
		0.508832f,
		0.867971f,
		0.654581f,
		0.058204f,
		0.566454f,
		0.084124f,
		0.548539f,
		0.90269f,
		0.779571f,
		0.562058f,
		0.048082f,
		0.863109f,
		0.07929f,
		0.713559f,
		0.783496f,
		0.265266f,
		0.672089f,
		0.786939f,
		0.143048f,
		0.086196f,
		0.876129f,
		0.408708f,
		0.229312f,
		0.629995f,
		0.206665f,
		0.207308f,
		0.710079f,
		0.341704f,
		0.264921f,
		0.028748f,
		0.629222f,
		0.470173f,
		0.726228f,
		0.125243f,
		0.328249f,
		0.794187f,
		0.74134f,
		0.489895f,
		0.189396f,
		0.724654f,
		0.092841f,
		0.039809f,
		0.860126f,
		0.247701f,
		0.655331f,
		0.964121f,
		0.672536f,
		0.044522f,
		0.690567f,
		0.837238f,
		0.63152f,
		0.953734f,
		0.352484f,
		0.289026f,
		0.034152f,
		0.852575f,
		0.098454f,
		0.795529f,
		0.452181f,
		0.826159f,
		0.186993f,
		0.820725f,
		0.440328f,
		0.922137f,
		0.704592f,
		0.915437f,
		0.738183f,
		0.733461f,
		0.193798f,
		0.929213f,
		0.16139f,
		0.318547f,
		0.888751f,
		0.430968f,
		0.740837f,
		0.193544f,
		0.872253f,
		0.563074f,
		0.274598f,
		0.347805f,
		0.666176f,
		0.449831f,
		0.800991f,
		0.588727f,
		0.052296f,
		0.714761f,
		0.42062f,
		0.570325f,
		0.05755f,
		0.210888f,
		0.407312f,
		0.662848f,
		0.924382f,
		0.895958f,
		0.775198f,
		0.688605f,
		0.025721f,
		0.301913f,
		0.791408f,
		0.500602f,
		0.831984f,
		0.828509f,
		0.642093f,
		0.494174f,
		0.52588f,
		0.446365f,
		0.440063f,
		0.763114f,
		0.630358f,
		0.223943f,
		0.333806f,
		0.906033f,
		0.498306f,
		0.241278f,
		0.42764f,
		0.772683f,
		0.198082f,
		0.225379f,
		0.503894f,
		0.436599f,
		0.016503f,
		0.803725f,
		0.189878f,
		0.291095f,
		0.499114f,
		0.151573f,
		0.079031f,
		0.904618f,
		0.708535f,
		0.2739f,
		0.067419f,
		0.317124f,
		0.936499f,
		0.716511f,
		0.543845f,
		0.939909f,
		0.826574f,
		0.71509f,
		0.154864f,
		0.75015f,
		0.845808f,
		0.648108f,
		0.556564f,
		0.644757f,
		0.140873f,
		0.799167f,
		0.632989f,
		0.444245f,
		0.471978f,
		0.43591f,
		0.359793f,
		0.216241f,
		0.007633f,
		0.337236f,
		0.857863f,
		0.380247f,
		0.092517f,
		0.799973f,
		0.919f,
		0.296798f,
		0.096989f,
		0.854831f,
		0.165369f,
		0.568475f,
		0.216855f,
		0.020457f,
		0.835511f,
		0.538039f,
		0.999742f,
		0.620226f,
		0.244053f,
		0.060399f,
		0.323007f,
		0.294874f,
		0.988899f,
		0.384919f,
		0.735655f,
		0.773428f,
		0.549776f,
		0.292882f,
		0.660611f,
		0.593507f,
		0.621118f,
		0.175269f,
		0.682119f,
		0.794493f,
		0.868197f,
		0.63215f,
		0.807823f,
		0.509656f,
		0.482035f,
		0.00178f,
		0.259126f,
		0.358002f,
		0.280263f,
		0.192985f,
		0.290367f,
		0.208111f,
		0.917633f,
		0.114422f,
		0.925491f,
		0.98111f,
		0.25557f,
		0.974862f,
		0.016629f,
		0.552599f,
		0.575741f,
		0.612978f,
		0.615965f,
		0.803615f,
		0.772334f,
		0.089745f,
		0.838812f,
		0.634542f,
		0.113709f,
		0.755832f,
		0.577589f,
		0.667489f,
		0.529834f,
		0.32566f,
		0.817597f,
		0.316557f,
		0.335093f,
		0.737363f,
		0.260951f,
		0.737073f,
		0.04954f,
		0.735541f,
		0.988891f,
		0.299116f,
		0.147695f,
		0.417271f,
		0.940811f,
		0.52416f,
		0.857968f,
		0.176403f,
		0.244835f,
		0.485759f,
		0.033353f,
		0.280319f,
		0.750688f,
		0.755809f,
		0.924208f,
		0.095956f,
		0.962504f,
		0.275584f,
		0.173715f,
		0.942716f,
		0.706721f,
		0.078464f,
		0.576716f,
		0.804667f,
		0.559249f,
		0.900611f,
		0.646904f,
		0.432111f,
		0.927885f,
		0.383277f,
		0.269973f,
		0.114244f,
		0.574867f,
		0.150703f,
		0.241855f,
		0.272871f,
		0.19995f,
		0.079719f,
		0.868566f,
		0.962833f,
		0.789122f,
		0.320025f,
		0.905554f,
		0.234876f,
		0.991356f,
		0.061913f,
		0.732911f,
		0.78596f,
		0.874074f,
		0.069035f,
		0.658632f,
		0.309901f,
		0.023676f,
		0.791603f,
		0.764661f,
		0.661278f,
		0.319583f,
		0.82965f,
		0.117091f,
		0.903124f,
		0.982098f,
		0.161631f,
		0.193576f,
		0.670428f,
		0.85739f,
		0.00376f,
		0.572578f,
		0.222162f,
		0.114551f,
		0.420118f,
		0.530404f,
		0.470682f,
		0.525527f,
		0.764281f,
		0.040596f,
		0.443275f,
		0.501124f,
		0.816161f,
		0.417467f,
		0.332172f,
		0.447565f,
		0.614591f,
		0.559246f,
		0.805295f,
		0.226342f,
		0.155065f,
		0.71463f,
		0.160925f,
		0.760001f,
		0.453456f,
		0.093869f,
		0.406092f,
		0.264801f,
		0.72037f,
		0.743388f,
		0.373269f,
		0.403098f,
		0.911923f,
		0.897249f,
		0.147038f,
		0.753037f,
		0.516093f,
		0.739257f,
		0.175018f,
		0.045768f,
		0.735857f,
		0.80133f,
		0.927708f,
		0.240977f,
		0.59187f,
		0.921831f,
		0.540733f,
		0.1491f,
		0.423152f,
		0.806876f,
		0.397081f,
		0.0611f,
		0.81163f,
		0.044899f,
		0.460915f,
		0.961202f,
		0.822098f,
		0.971524f,
		0.867608f,
		0.773604f,
		0.226616f,
		0.686286f,
		0.926972f,
		0.411613f,
		0.267873f,
		0.081937f,
		0.226124f,
		0.295664f,
		0.374594f,
		0.53324f,
		0.237876f,
		0.669629f,
		0.599083f,
		0.513081f,
		0.878719f,
		0.201577f,
		0.721296f,
		0.495038f,
		0.07976f,
		0.965959f,
		0.23309f,
		0.052496f,
		0.714748f,
		0.887844f,
		0.308724f,
		0.972885f,
		0.723337f,
		0.453089f,
		0.914474f,
		0.704063f,
		0.823198f,
		0.834769f,
		0.906561f,
		0.9196f,
		0.100601f,
		0.307564f,
		0.901977f,
		0.468879f,
		0.265376f,
		0.885188f,
		0.683875f,
		0.868623f,
		0.081032f,
		0.466835f,
		0.199087f,
		0.663437f,
		0.812241f,
		0.311337f,
		0.821361f,
		0.356628f,
		0.898054f,
		0.160781f,
		0.222539f,
		0.714889f,
		0.490287f,
		0.984915f,
		0.951755f,
		0.964097f,
		0.641795f,
		0.815472f,
		0.852732f,
		0.862074f,
		0.051108f,
		0.440139f,
		0.323207f,
		0.517171f,
		0.562984f,
		0.115295f,
		0.743103f,
		0.977914f,
		0.337596f,
		0.440694f,
		0.535879f,
		0.959427f,
		0.351427f,
		0.704361f,
		0.010826f,
		0.131162f,
		0.57708f,
		0.349572f,
		0.774892f,
		0.425796f,
		0.072697f,
		0.500001f,
		0.267322f,
		0.909654f,
		0.206176f,
		0.223987f,
		0.937698f,
		0.323423f,
		0.117501f,
		0.490308f,
		0.474372f,
		0.689943f,
		0.168671f,
		0.719417f,
		0.188928f,
		0.330464f,
		0.265273f,
		0.446271f,
		0.171933f,
		0.176133f,
		0.474616f,
		0.140182f,
		0.114246f,
		0.905043f,
		0.71387f,
		0.555261f,
		0.951333f
	};

	public static float valuePreset1(float x, float y)
	{
		float num = Get(x * 0.1f, y * 0.1f, 1f, VoronoiType.First, DistanceMethod.Length2) * 2f - 1f;
		if (!(num < -1f))
		{
			if (!(num > 1f))
			{
				return num;
			}
			return 1f;
		}
		return -1f;
	}

	public static float valuePreset2(float x, float y)
	{
		float num = Get(x * 0.1f, y * 0.1f, 1f, VoronoiType.Difference21, DistanceMethod.Length2) * 2f - 1f;
		if (!(num < -1f))
		{
			if (!(num > 1f))
			{
				return num;
			}
			return 1f;
		}
		return -1f;
	}

	public static float valuePreset3(float x, float y)
	{
		float num = Get(x * 0.1f, y * 0.1f, 1f, VoronoiType.Prop12, DistanceMethod.Length4) * 2f - 1f;
		if (!(num < -1f))
		{
			if (!(num > 1f))
			{
				return num;
			}
			return 1f;
		}
		return -1f;
	}

	public static float Get(float x, float y, float z, VoronoiType type, DistanceMethod Distance)
	{
		float num;
		lock (da4)
		{
			switch (type)
			{
			default:
				Calculate4(new Vector2(x, y), da4, pa4, Distance);
				num = da4[(int)type];
				break;
			case VoronoiType.Prop12:
				Calculate4(new Vector2(x, y), da4, pa4, Distance);
				num = da4[0] / da4[1];
				break;
			case VoronoiType.Difference21:
				Calculate4(new Vector2(x, y), da4, pa4, Distance);
				num = da4[1] - da4[0];
				break;
			case VoronoiType.Difference32:
				Calculate4(new Vector2(x, y), da4, pa4, Distance);
				num = da4[2] - da4[1];
				break;
			case VoronoiType.Crackle:
				num = Mathf.Max(1f, 10f * Get(x, y, z, VoronoiType.Difference21, Distance));
				break;
			}
		}
		return num * k_Root2OverRoot3;
	}

	public static void GetPoints(Vector2 p, DistanceMethod Distance, Vector2[] pa)
	{
		lock (da4)
		{
			Calculate4(p, da4, pa, Distance);
		}
	}

	public static void GetWeightsWithPointsBanded(Vector2 p, DistanceMethod Distance, float band, float[] da, Vector2[] pa)
	{
		Calculate6(p, da, pa, Distance);
		float num = 1f;
		for (int i = 1; i < da.Length; i++)
		{
			float num2 = da[i] - da[0];
			if (num2 < band)
			{
				da[i] = 1f - num2 / band;
				num += da[i];
			}
			else
			{
				da[i] = 0f;
			}
		}
		da[0] = 1f;
		for (int j = 0; j < da.Length; j++)
		{
			if (da[j] != 0f)
			{
				da[j] /= num;
			}
		}
	}

	public static Vector2 GetPointFromIndex(Vector2 c, byte idx)
	{
		return new Vector2(Coords[idx * 3] + (float)Mathf.FloorToInt(c.x), Coords[idx * 3 + 1] + (float)Mathf.FloorToInt(c.y));
	}

	private static void Calculate4(Vector2 pos, float[] da, Vector2[] pa, DistanceMethod Distance)
	{
		if (da.Length < 4 || pa.Length < 4)
		{
			d.Assert(condition: false);
		}
		int num = Mathf.FloorToInt(pos.x);
		int num2 = Mathf.FloorToInt(pos.y);
		da[0] = (da[1] = (da[2] = (da[3] = float.MaxValue)));
		for (int i = num - 1; i <= num + 1; i++)
		{
			for (int j = num2 - 1; j <= num2 + 1; j++)
			{
				byte b = Index[(Index[(Index[0] + j) & 0xFF] + i) & 0xFF];
				int num3 = b + b + b;
				Vector2 vector = new Vector2(Coords[num3] + (float)i, Coords[num3 + 1] + (float)j);
				Vector2 v = pos - vector;
				float num4;
				switch (Distance)
				{
				default:
					num4 = v.magnitude;
					break;
				case DistanceMethod.Length2:
					num4 = v.sqrMagnitude;
					break;
				case DistanceMethod.Length4:
					num4 = v.sqrMagnitude;
					num4 *= num4;
					break;
				case DistanceMethod.Manhattan:
					num4 = v.GetManhattan();
					break;
				case DistanceMethod.Chebychev:
					num4 = v.GetChebychev();
					break;
				case DistanceMethod.Minkowski4:
					num4 = v.GetMinkowski4();
					break;
				case DistanceMethod.Minkowski5:
					num4 = v.GetMinkowski5();
					break;
				}
				if (num4 < da[0])
				{
					da[3] = da[2];
					da[2] = da[1];
					da[1] = da[0];
					da[0] = num4;
					pa[3] = pa[2];
					pa[2] = pa[1];
					pa[1] = pa[0];
					pa[0] = vector;
				}
				else if (num4 < da[1])
				{
					da[3] = da[2];
					da[2] = da[1];
					da[1] = num4;
					pa[3] = pa[2];
					pa[2] = pa[1];
					pa[1] = vector;
				}
				else if (num4 < da[2])
				{
					da[3] = da[2];
					da[2] = num4;
					pa[3] = pa[2];
					pa[2] = vector;
				}
				else if (num4 < da[3])
				{
					da[3] = num4;
					pa[3] = vector;
				}
			}
		}
	}

	private static void Calculate6(Vector2 pos, float[] da, Vector2[] pa, DistanceMethod Distance)
	{
		if (da.Length < 6 || pa.Length < 6)
		{
			d.Assert(condition: false);
		}
		int num = Mathf.FloorToInt(pos.x);
		int num2 = Mathf.FloorToInt(pos.y);
		da[0] = (da[1] = (da[2] = (da[3] = (da[4] = (da[5] = float.MaxValue)))));
		for (int i = num - 1; i <= num + 1; i++)
		{
			for (int j = num2 - 1; j <= num2 + 1; j++)
			{
				byte b = Index[(Index[(Index[0] + j) & 0xFF] + i) & 0xFF];
				int num3 = b + b + b;
				Vector2 vector = new Vector2(Coords[num3] + (float)i, Coords[num3 + 1] + (float)j);
				Vector2 v = pos - vector;
				float num4;
				switch (Distance)
				{
				default:
					num4 = v.magnitude;
					break;
				case DistanceMethod.Length2:
					num4 = v.sqrMagnitude;
					break;
				case DistanceMethod.Length4:
					num4 = v.sqrMagnitude;
					num4 *= num4;
					break;
				case DistanceMethod.Manhattan:
					num4 = v.GetManhattan();
					break;
				case DistanceMethod.Chebychev:
					num4 = v.GetChebychev();
					break;
				case DistanceMethod.Minkowski4:
					num4 = v.GetMinkowski4();
					break;
				case DistanceMethod.Minkowski5:
					num4 = v.GetMinkowski5();
					break;
				}
				if (num4 < da[0])
				{
					da[5] = da[4];
					da[4] = da[3];
					da[3] = da[2];
					da[2] = da[1];
					da[1] = da[0];
					da[0] = num4;
					pa[5] = pa[4];
					pa[4] = pa[3];
					pa[3] = pa[2];
					pa[2] = pa[1];
					pa[1] = pa[0];
					pa[0] = vector;
				}
				else if (num4 < da[1])
				{
					da[5] = da[4];
					da[4] = da[3];
					da[3] = da[2];
					da[2] = da[1];
					da[1] = num4;
					pa[5] = pa[4];
					pa[4] = pa[3];
					pa[3] = pa[2];
					pa[2] = pa[1];
					pa[1] = vector;
				}
				else if (num4 < da[2])
				{
					da[5] = da[4];
					da[4] = da[3];
					da[3] = da[2];
					da[2] = num4;
					pa[5] = pa[4];
					pa[4] = pa[3];
					pa[3] = pa[2];
					pa[2] = vector;
				}
				else if (num4 < da[3])
				{
					da[5] = da[4];
					da[4] = da[3];
					da[3] = num4;
					pa[5] = pa[4];
					pa[4] = pa[3];
					pa[3] = vector;
				}
				else if (num4 < da[4])
				{
					da[5] = da[4];
					da[4] = num4;
					pa[5] = pa[4];
					pa[4] = vector;
				}
				else if (num4 < da[5])
				{
					da[5] = num4;
					pa[5] = vector;
				}
			}
		}
	}
}
