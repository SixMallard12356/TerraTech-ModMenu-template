#define UNITY_EDITOR
using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;

public class SpawnPointBank
{
	[Serializable]
	public class Config
	{
		public V3Serial[] locations;
	}

	public class SpawnPointInfo
	{
		private float blockedTimeout;

		public bool IsAvailable => Time.time >= blockedTimeout;

		public Vector3 position { get; private set; }

		public SpawnPointInfo(Vector3 pos)
		{
			position = pos;
			blockedTimeout = 0f;
		}

		public void SetTemporarilyBlocked()
		{
			blockedTimeout = Time.time + 1f;
		}
	}

	private Config m_SpawnPointConfig;

	private List<SpawnPointInfo> m_PossibleSpawnLocations = new List<SpawnPointInfo>();

	private List<NetSpawnPoint> m_ActiveShieldBubbles = new List<NetSpawnPoint>();

	private float m_SpawnPointBoundsRadius;

	private bool m_ShieldsEnabled;

	private bool m_BarrierEnabled;

	public SpawnPointBank(Config config, float spawnPointBoundsRadius)
	{
		m_SpawnPointConfig = config;
		m_SpawnPointBoundsRadius = spawnPointBoundsRadius;
		SetupSpawnLocations();
	}

	public NetSpawnPoint SpawnShieldBubble(Vector3 position, Quaternion rotation)
	{
		d.Assert(Singleton.Manager<ManNetwork>.inst.IsServer, "SpawnBank.SpawnShieldBubble - SpawnBank interface may only be called from the server!");
		NetSpawnPoint component = Singleton.Manager<ManNetwork>.inst.SpawnPrefab.transform.Spawn(position, rotation).GetComponent<NetSpawnPoint>();
		ConfigureShieldBubble(component);
		NetworkServer.Spawn(component.gameObject);
		m_ActiveShieldBubbles.Add(component);
		return component;
	}

	public void RemoveRecycledShieldBubble(NetSpawnPoint spawnPoint)
	{
		m_ActiveShieldBubbles.Remove(spawnPoint);
	}

	public void SetAllSpawnShieldsEnabled(bool enabled)
	{
		d.Assert(Singleton.Manager<ManNetwork>.inst.IsServer, "SpawnBank.SetAllSpawnShieldsEnabled - SpawnBank interface may only be called from the server!");
		if (enabled == m_ShieldsEnabled && enabled == m_BarrierEnabled)
		{
			return;
		}
		m_ShieldsEnabled = enabled;
		m_BarrierEnabled = enabled;
		foreach (NetSpawnPoint activeShieldBubble in m_ActiveShieldBubbles)
		{
			ConfigureShieldBubble(activeShieldBubble);
		}
	}

	public void SetShieldEnabled(uint shieldNetID, bool enabled)
	{
		d.Assert(Singleton.Manager<ManNetwork>.inst.IsServer, "SpawnBank.SetShieldEnabled - SpawnBank interface may only be called from the server!");
		NetSpawnPoint spawnPointByNetID = GetSpawnPointByNetID(shieldNetID);
		if (spawnPointByNetID != null)
		{
			spawnPointByNetID.ServerSetShieldEnabled(enabled);
			spawnPointByNetID.ServerSetBarrierEnabled(enabled);
		}
	}

	public void DisableShieldAfterDelay(uint shieldId)
	{
		d.Assert(Singleton.Manager<ManNetwork>.inst.IsServer, "SpawnBank.DisableShieldAfterDelay - SpawnBank interface may only be called from the server!");
		NetSpawnPoint spawnPointByNetID = GetSpawnPointByNetID(shieldId);
		if (spawnPointByNetID != null)
		{
			spawnPointByNetID.ServerCommenceProtectionBubbleCountdown();
		}
	}

	public bool IsShieldActive(uint shieldId)
	{
		d.Assert(Singleton.Manager<ManNetwork>.inst.IsServer, "SpawnBank.IsShieldActive - SpawnBank interface may only be called from the server!");
		NetSpawnPoint spawnPointByNetID = GetSpawnPointByNetID(shieldId);
		if (spawnPointByNetID != null)
		{
			return spawnPointByNetID.IsBarrierEnabled();
		}
		return false;
	}

	public List<SpawnPointInfo> GetPossibleSpawnLocations()
	{
		d.Assert(Singleton.Manager<ManNetwork>.inst.IsServer, "SpawnBank.GetPossibleSpawnLocations - SpawnBank interface may only be called from the server!");
		return m_PossibleSpawnLocations;
	}

	private void SetupSpawnLocations()
	{
		m_PossibleSpawnLocations.Clear();
		if (m_SpawnPointConfig.locations.Length != 0)
		{
			AddConfiguredSpawnPoints();
		}
		if (m_PossibleSpawnLocations.Count < 16)
		{
			d.LogErrorFormat("Insufficient spawn points within area radius to accomodate max player count! {0}/{1} valid configured spawn points found.", m_PossibleSpawnLocations.Count, 16.ToString());
			AddAutoGeneratedSpawnPoints();
		}
	}

	private void AddConfiguredSpawnPoints()
	{
		Vector3 scenePosition = Singleton.Manager<ManNetwork>.inst.MapCenter.ScenePosition;
		float spawnPointBoundsRadius = m_SpawnPointBoundsRadius;
		float num = spawnPointBoundsRadius * spawnPointBoundsRadius;
		int num2 = m_SpawnPointConfig.locations.Length;
		for (int i = 0; i < num2; i++)
		{
			Vector3 vector = m_SpawnPointConfig.locations[i];
			Vector3 vector2 = vector - scenePosition;
			vector2.y = 0f;
			if (vector2.sqrMagnitude < num)
			{
				m_PossibleSpawnLocations.Add(new SpawnPointInfo(vector));
				continue;
			}
			d.LogFormat("Spawn point {0} is outside the current arena bounds by {1} units and will not be used.", vector, (vector2.magnitude - spawnPointBoundsRadius).ToString());
		}
	}

	private void AddAutoGeneratedSpawnPoints()
	{
		int count = m_PossibleSpawnLocations.Count;
		float num = m_SpawnPointBoundsRadius * 0.5f;
		Vector3 scenePosition = Singleton.Manager<ManNetwork>.inst.MapCenter.ScenePosition;
		for (int i = count; i < 16; i++)
		{
			float f = (float)Math.PI / 8f * (float)i;
			m_PossibleSpawnLocations.Add(new SpawnPointInfo(scenePosition + new Vector3(num * Mathf.Cos(f), 0f, num * Mathf.Sin(f))));
		}
	}

	private void ConfigureShieldBubble(NetSpawnPoint spawnPoint)
	{
		spawnPoint.ServerSetShieldEnabled(m_ShieldsEnabled);
		spawnPoint.ServerSetBarrierEnabled(m_BarrierEnabled);
	}

	private NetSpawnPoint GetSpawnPointByNetID(uint betID)
	{
		for (int i = 0; i < m_ActiveShieldBubbles.Count; i++)
		{
			NetSpawnPoint netSpawnPoint = m_ActiveShieldBubbles[i];
			if (netSpawnPoint.netId.Value == betID)
			{
				return netSpawnPoint;
			}
		}
		return null;
	}
}
